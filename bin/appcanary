#!/usr/bin/env ruby

require "rubygems"
require "appcanary"
require "optparse"

class AppcanaryCLI
  class << self
    TOP_LEVEL_HELP = <<-HELP
Usage: appcanary check|update [options]

Subcommands are:
  check  -  Check your gem bundle for vulnerabilities
  update -  Update an Appcanary monitor

See "appcanary COMMAND --help" for more information about a specific command.
    HELP

    REQUIRED_PARAMS = {
      api_key: "Must provide an API key.",
      gemfile_lock_path: "Must provide a path to a Gemfile.lock",
      monitor_name: "Must provide a monitor name"
    }

    REQUIRED = { "check" => [:api_key, :gemfile_lock_path],
                 "update" => [:api_key, :gemfile_lock_path, :monitor_name] }

    def api_key_opt(opts, vals)
      opts.on("-a", "--api-key API_KEY", :REQUIRED,
              "Your Appcanary API key. Required; find it at https://appcanary.com/settings") do |ak|
        vals[:api_key] = ak
        Appcanary.api_key = ak
      end
    end

    def gemfile_lock_opt(opts, vals)
      opts.on("-g", "--gemfile-lock GEMFILE_LOCK", :REQUIRED,
              "Path to the Gemfile.lock to ship to Appcanary. Required.") do |gl|
        vals[:gemfile_lock_path] = gl
        Appcanary.gemfile_lock_path = gl
      end
    end

    def base_uri_opt(opts, vals)
      opts.on("-b", "--base-uri BASE_URI", :OPTIONAL,
              "The URL for the Appcanary endpoint to use.") do |bu|
        Appcanary.base_uri = bu
      end
    end

    def monitor_name_opt(opts, vals)
      opts.on("-m", "--monitor-name MONITOR_NAME", :REQUIRED,
              "The name of the Appcanary monitor to update. Required.") do |mn|
        vals[:monitor_name] = mn
        Appcanary.monitor_name = mn
      end
    end

    def print_help(banner, msg=nil)
      if msg
        puts "#{msg}\n\n"
      end

      puts banner
      exit
    end

    def parse(args)
      command = args.first
      values = {}
     
      subcommands = {
        "update" => OptionParser.new do |opts|
          opts.banner = "Usage: update [options]"
          api_key_opt(opts, values)
          base_uri_opt(opts, values)
          gemfile_lock_opt(opts, values)
          monitor_name_opt(opts, values)
        end,
        "check" => OptionParser.new do |opts|
          opts.banner = "Usage: check [options]"
          api_key_opt(opts, values)
          base_uri_opt(opts, values)
          gemfile_lock_opt(opts, values)
        end
      }

      if command.nil?
        print_help TOP_LEVEL_HELP
      elsif subcommands[command].nil?
        print_help TOP_LEVEL_HELP, 
          "Sorry, I don't know '#{command}'."
      else 
        subcmd = subcommands[command]

        begin
          opt = subcmd.parse(args[1..-1])
        rescue => e
          print_help subcmd.help, e
        end

        if values.empty?
          print_help subcmd.help
        elsif missing = REQUIRED[command].find { |flag| !values.keys.include?(flag) }
          print_help subcmd.help, REQUIRED_PARAMS[missing]
        end
      end

      command
    end
  end
end

def run_check
  response = Appcanary.check
  if response["meta"]["vulnerable"]
    response["included"].map do |vuln|
      vuln["attributes"]["reference-ids"]
    end.flatten.uniq.each do |ref|
      puts ref
    end
  end
end

def run_appcanary_command
  case AppcanaryCLI.parse(ARGV)
  when "update"
    puts Appcanary.update_monitor!
  when "check"
    run_check
  end
rescue => e
  puts e
end

run_appcanary_command
